from __future__ import with_statement
from __future__ import absolute_import
from __future__ import division


import os
import shutil
from fengestad import fs
from fengestad.gamecenter.changehandler import ChangeHandler
from fengestad.gamecenter.gamecenterutil import GameCenterUtil
from fengestad.gamecenter.gamecontroller import GameController
from fengestad.gamecenter.refreshratetool import RefreshRateTool
from fengestad.gamecenter.resources import resources, logger, ngettext, _


class MameController(GameController):

    def init(self):
        self.mame_init()

    def init_input(self):
        self.mame_init_input()
        if fs.windows:
            self.input_device_order = 'DINPUT8'

    def prepare(self):
        self.mame_prepare()

    def run(self):
        #plugin_id = 'no.fengestad.emulator.mame'
        #plugin = pyapp.plugins.get_plugin(plugin_id)
        #args = [self.romset]
        #args.extend(['-verbose'])
        #args.extend(self.args)
        #print("args", args)
        #cwd_dir = self.context.temp.dir('mame-cwd')
        #process = plugin.mame(args, cwd=cwd_dir, env=self.env)
        #return process
        self.args.append('-verbose')
        self.args.append(self.romset)
        cwd = self.context.temp.dir('mame-cwd')
        return self.run_emulator('mame', cwd=cwd)

    def cleanup(self):
        cfg_dir = self.context.temp.dir('mame-cfg')
        if os.path.exists(os.path.join(cfg_dir, 'default.cfg')):
            os.unlink(os.path.join(cfg_dir, 'default.cfg'))
        self.changes.update(os.path.join(self.context.game.state_dir, 'cfg'))

    def mame_init(self):
        # override in subclasses
        pass

    def mame_prepare(self):
        pass

    def configure(self):

        self.configure_romset()

        self.default_xml = ["""\xef\xbb\xbf<?xml version="1.0"?>
<!-- This file is autogenerated; comments and unknown tags will be stripped -->
<mameconfig version="10">
    <system name="default">\n"""]
        self.game_xml = ["""\xef\xbb\xbf<?xml version="1.0"?>
<!-- This file is autogenerated; comments and unknown tags will be stripped -->
<mameconfig version="10">
    <system name="{0}">\n""".format(self.romset)]

        #game_config = self.get_game_config()
        #rom_path = os.path.dirname(self.context.game.file)
        self.args.append('-skip_gameinfo')
        state_dir = self.context.game.state_dir
        state_dir = state_dir + os.sep

        # FIXME: Stored initial nvram
        """
        data_dir = self.configuration.get_data_dir()
        for item in os.listdir(data_dir):
            itempath = os.path.join(data_dir, item)
            if item.endswith(".nv"):
                dest = os.path.join(nvram_dir, item)
                if not os.path.exists(dest):
                    shutil.copy(itempath, dest)
        """
        #state_dir = self.context.temp.dir('mame-state')
        cwd_dir = self.context.temp.dir('mame-cwd')
        #cfg_dir = os.path.join(cwd_dir, "cfg")
        #cfg_dir = state_dir
        cfg_dir = self.context.temp.dir('mame-cfg')
        #if not os.path.isdir(cfg_dir):
        #    os.makedirs(cfg_dir)

        rom_path = self.context.temp.dir('mame-roms')
        #rom_path = self.context.game.file
        #GameCenterUtil.unpack(self.context.game.file, rom_path)
        shutil.copy(self.context.game.file, os.path.join(
                rom_path, self.romset + '.zip'))
        # MAME uses ; as path separator on all systems, apparently
        try:
            #self.args.extend(["-rompath", self.bios_dir()])
            rom_path = rom_path + u';' + self.mame_get_bios_dir()
        except:
            pass
        rom_path = rom_path + u';' + os.path.dirname(
                self.context.game.file)
        #rom_path = rom_path + os.pathsep + os.path.dirname(
        #        self.context.game.file)
        self.args.extend(['-rompath', rom_path])

        # copy initial nvram disk, if any, to nvram dir
        p, e = os.path.splitext(self.context.game.file)
        initram = p + u'.nv'
        if os.path.exists(initram):
            shutil.copy(initram, os.path.join(state_dir, self.romset + '.nv'))

        game_cfg_file = os.path.join(cfg_dir,
                '{romset}.cfg'.format(romset=self.romset))
        self.args.extend(['-nvram_directory', state_dir])
        self.args.extend(['-memcard_directory', state_dir])
        #self.args.extend(['-hiscore_directory', state_dir])
        self.args.extend(['-state_directory', state_dir])
        self.args.extend(['-diff_directory', state_dir])
        self.args.extend(['-cfg_directory', cfg_dir])


#        if not os.path.exists(game_cfg_file):
#            with open(game_cfg_file, 'wb') as f:
#                f.write("""\xef\xbb\xbf<?xml version="1.0"?>
#<!-- This file is autogenerated; comments and unknown tags will be stripped -->
#<mameconfig version="10">
#    <system name="{romset}" />
#</mameconfig>
#""".format(romset=self.romset))

        self.changes = ChangeHandler(cfg_dir)
        self.changes.init(os.path.join(self.context.game.state_dir, 'cfg'))

        self.configure_input()
        self.configure_graphics()

        self.game_xml.append('    </system>\n')
        self.game_xml.append('</mameconfig>\n')
        with open(game_cfg_file, 'wb') as f:
            f.write(''.join(self.game_xml))
            print("")
            print("")
            print(''.join(self.game_xml))
            print("")
            print("")

        self.default_xml.append('    </system>\n')
        self.default_xml.append('</mameconfig>\n')
        with open(os.path.join(cfg_dir, 'default.cfg'), 'wb') as f:
            f.write(''.join(self.default_xml))
            print("")
            print("")
            print(''.join(self.default_xml))
            print("")
            print("")
        self.mame_configure()

    def mame_configure(self):
        # override in subclasses
        pass

    def configure_romset(self):
        self.romset = self.mame_get_romset()

    def configure_input(self):
        self.default_xml.append("        <input>\n")
        self.game_xml.append("        <input>\n")
        ports = {}
        for i, input in enumerate(self.inputs):
            input_mapping = self.mame_get_input_mapping(i)
            mapper = InputMapper(input, input_mapping)
            for key, value in mapper.iteritems():
                print("---->", key, value)
                if isinstance(key, tuple):
                    key, type = key
                else:
                    type = 'standard'
                if not 'type=' in key:
                    key = 'type="{0}"'.format(key)
                key = key.replace("#", str(i + 1))
                #if '/' in key:
                #    key, tag = key.split('/')
                #else:
                #    tag = None
                #if ':' in key:
                #    key, type = key.split(':')
                #else:
                #    type = 'standard'
                if 'AD_STICK' in key:# and type == 'standard':
                    analog_axis = True
                else:
                    analog_axis = False
                if analog_axis and 'AXIS' in value:
                    value = value[:value.index('AXIS') + 4]
                    # remove increment / decrement type, set type
                    # to standard since this is an analog axis
                    type = 'standard'
                ports.setdefault(key, {}).setdefault(
                        type, set()).add(value)
        for key, port in ports.iteritems():
            #key, tag = key
            if 'tag=' in key:
                xml = self.game_xml
                #xml.append(
                #        '            <port tag="{tag}" '
                #        'type="{key}" mask="1" default="0">'
                #        '\n'.format(tag=tag, key=key))
                #xml.append(
                #        '            <port {key}>\n'.format(key=key))
            else:
                xml = self.default_xml
                #xml.append(
                #        '            <port type="{key}">\n'.format(key=key))
                #xml.append(
                #        '            <port {key}>\n'.format(key=key))
            xml.append(
                    '            <port {key}>\n'.format(key=key))
            for type, values in port.iteritems():
                xml.append('                <newseq type="{type}">\n'.format(
                        type=type))
                xml.append('                    ')
                for i, value in enumerate(values):
                    if i > 0:
                        xml.append(' OR ')
                    xml.append(value)
                xml.append('\n                </newseq>\n')
            xml.append(
                    '            </port>\n')
        self.default_xml.append("        </input>\n")
        self.game_xml.append("        </input>\n")

    def configure_graphics(self):
        if fs.windows:
            self.args.extend(["-video", "d3d"])
        else:
            self.args.extend(["-video", "opengl"])

        if self.configure_vsync():
            self.args.append('-waitvsync')
        else:
            if fs.windows:
                self.args.append('-triplebuffer')
        if self.get_option('fullscreen'):
            pass
        else:
            self.args.append('-window')
        if self.get_option('stretch'):
            self.args.extend(["-nokeepaspect"])
        else:
            self.args.extend(["-keepaspect"])

        self.game_xml.append('        <video>\n')
        self.game_xml.append('            <screen index="0" ')
        ox, oy, sx, sy = self.mame_get_offset_and_scale()
        self.game_xml.append('hstretch="{0:0.6f}" '.format(sx))
        self.game_xml.append('vstretch="{0:0.6f}" '.format(sy))
        self.game_xml.append('/>\n')
        self.game_xml.append('        </video>\n')

        #effect = 'none'
        #filter_mapping = {
        #    'auto': 'aperture1x2rb',
        #    'rgb': 'aperture1x2rb',
        #}
        #for filter in self.context.config.filters:
        #    try:
        #        effect = filter_mapping[filter]
        #    except KeyError:
        #        continue
        #    break
        #self.args.extend(['-effect', effect])

    def mame_get_offset_and_scale(self):
        return 0.0, 0.0, 1.0, 1.0

    def mame_get_bios_dir(self):
        for dir in self.resources_dirs():
            bios_dir = os.path.join(dir, self.context.game.platform)
            if os.path.exists(bios_dir):
                return bios_dir
        raise Exception("Could not find bios dir")


class InputMapper(GameController.InputMapper):

    def axis(self, axis, positive):
        axis_str = ["X", "Y", "Z", "RX", "RY", "RZ"][axis]
        if axis == 0:
            dir_str = "RIGHT" if positive else "LEFT"
        elif axis == 1:
            dir_str = "DOWN" if positive else "UP"
        else:
            # FIXME: Check this
            dir_str = "POS" if positive else "NEG"
        return "JOYCODE_%d_%sAXIS_%s_SWITCH" % (self.device.index + 1,
                axis_str, dir_str)

    def hat(self, hat, direction):
        if fs.windows:
            dir_str = {
                'left': 'L',
                'right': 'R',
                'up': 'U',
                'down': 'D',
            }[direction]
            return "JOYCODE_%d_HATSWITCH%s" % (self.device.index + 1,
                    dir_str)
        else:
            dir_str = {
                'left': 'LEFT',
                'right': 'RIGHT',
                'up': 'UP',
                'down': 'DOWN',
            }[direction]
            return "JOYCODE_%d_HAT%d%s" % (self.device.index + 1, hat,
                    dir_str)

    def button(self, button):
        return "JOYCODE_%d_BUTTON%d" % (self.device.index + 1,
                button + 1)

    def key(self, key):
        return "KEYCODE_" + self.keycodes[key.sdl_name[5:].upper()]

    keycodes = {
        'BACKSPACE': 'BACKSPACE',
        #'TAB': 9,
        #'CLEAR': 12,
        'RETURN': 'ENTER',
        #'PAUSE': 19,
        #'ESCAPE': 27,
        'SPACE': 'SPACE',
        #'EXCLAIM': 33,
        #'QUOTEDBL': 34,
        #'HASH': 35,
        #'DOLLAR': 36,
        #'AMPERSAND': 38,
        #'QUOTE': 39,
        #'LEFTPAREN': 40,
        #'RIGHTPAREN': 41,
        #'ASTERISK': 42,
        #'PLUS': 43,
        'COMMA': 'COMMA',
        #'MINUS': 45,
        #'PERIOD': 46,
        #'SLASH': 47,
        '0': '0',
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
#    'COLON': 58,
#    'SEMICOLON': 59,
#    'LESS': 60,
#    'EQUALS': 61,
#    'GREATER': 62,
#    'QUESTION': 63,
#    'AT': 64,
    'LEFTBRACKET': '[',
#    'BACKSLASH': 92,
    'RIGHTBRACKET': ']',
#    'CARET': 94,
#    'UNDERSCORE': 95,
#    'BACKQUOTE': 96,
        'A': 'A',
        'B': 'B',
        'C': 'C',
        'D': 'D',
        'E': 'E',
        'F': 'F',
        'G': 'G',
        'H': 'H',
        'I': 'I',
        'J': 'J',
        'K': 'K',
        'L': 'L',
        'M': 'M',
        'N': 'N',
        'O': 'O',
        'P': 'P',
        'Q': 'Q',
        'R': 'R',
        'S': 'S',
        'T': 'T',
        'U': 'U',
        'V': 'V',
        'W': 'W',
        'X': 'X',
        'Y': 'Y',
        'Z': 'Z',
        'DELETE': 'DEL',
#    'WORLD_0': 160,
#    'WORLD_1': 161,
#    'WORLD_2': 162,
#    'WORLD_3': 163,
#    'WORLD_4': 164,
#    'WORLD_5': 165,
#    'WORLD_6': 166,
#    'WORLD_7': 167,
#    'WORLD_8': 168,
#    'WORLD_9': 169,
#    'WORLD_10': 170,
#    'WORLD_11': 171,
#    'WORLD_12': 172,
#    'WORLD_13': 173,
#    'WORLD_14': 174,
#    'WORLD_15': 175,
#    'WORLD_16': 176,
#    'WORLD_17': 177,
#    'WORLD_18': 178,
#    'WORLD_19': 179,
#    'WORLD_20': 180,
#    'WORLD_21': 181,
#    'WORLD_22': 182,
#    'WORLD_23': 183,
#    'WORLD_24': 184,
#    'WORLD_25': 185,
#    'WORLD_26': 186,
#    'WORLD_27': 187,
#    'WORLD_28': 188,
#    'WORLD_29': 189,
#    'WORLD_30': 190,
#    'WORLD_31': 191,
#    'WORLD_32': 192,
#    'WORLD_33': 193,
#    'WORLD_34': 194,
#    'WORLD_35': 195,
#    'WORLD_36': 196,
#    'WORLD_37': 197,
#    'WORLD_38': 198,
#    'WORLD_39': 199,
#    'WORLD_40': 200,
#    'WORLD_41': 201,
#    'WORLD_42': 202,
#    'WORLD_43': 203,
#    'WORLD_44': 204,
#    'WORLD_45': 205,
#    'WORLD_46': 206,
#    'WORLD_47': 207,
#    'WORLD_48': 208,
#    'WORLD_49': 209,
#    'WORLD_50': 210,
#    'WORLD_51': 211,
#    'WORLD_52': 212,
#    'WORLD_53': 213,
#    'WORLD_54': 214,
#    'WORLD_55': 215,
#    'WORLD_56': 216,
#    'WORLD_57': 217,
#    'WORLD_58': 218,
#    'WORLD_59': 219,
#    'WORLD_60': 220,
#    'WORLD_61': 221,
#    'WORLD_62': 222,
#    'WORLD_63': 223,
#    'WORLD_64': 224,
#    'WORLD_65': 225,
#    'WORLD_66': 226,
#    'WORLD_67': 227,
#    'WORLD_68': 228,
#    'WORLD_69': 229,
#    'WORLD_70': 230,
#    'WORLD_71': 231,
#    'WORLD_72': 232,
#    'WORLD_73': 233,
#    'WORLD_74': 234,
#    'WORLD_75': 235,
#    'WORLD_76': 236,
#    'WORLD_77': 237,
#    'WORLD_78': 238,
#    'WORLD_79': 239,
#    'WORLD_80': 240,
#    'WORLD_81': 241,
#    'WORLD_82': 242,
#    'WORLD_83': 243,
#    'WORLD_84': 244,
#    'WORLD_85': 245,
#    'WORLD_86': 246,
#    'WORLD_87': 247,
#    'WORLD_88': 248,
#    'WORLD_89': 249,
#    'WORLD_90': 250,
#    'WORLD_91': 251,
#    'WORLD_92': 252,
#    'WORLD_93': 253,
#    'WORLD_94': 254,
#    'WORLD_95': 255,
        'KP0': '0PAD',
        'KP1': '1PAD',
        'KP2': '2PAD',
        'KP3': '3PAD',
        'KP4': '4PAD',
        'KP5': '5PAD',
        'KP6': '6PAD',
        'KP7': '7PAD',
        'KP8': '8PAD',
        'KP9': '9PAD',
        'KP_PERIOD': 'DELPAD',
        'KP_DIVIDE': 'SLASHPAD',
        'KP_MULTIPLY': 'ASTERISK',
        'KP_MINUS': 'MINUSPAD',
        'KP_PLUS': 'PLUSPAD',
        'KP_ENTER': 'ENTERPAD',
#    'KP_EQUALS': 272,
        'UP': 'UP',
        'DOWN': 'DOWN',
        'RIGHT': 'RIGHT',
        'LEFT': 'LEFT',
        'INSERT': 'INSERT',
        'HOME': 'HOME',
        'END': 'END',
        'PAGEUP': 'PGDN',
        'PAGEDOWN': 'PGUP',
        'F1': 'F1',
        'F2': 'F2',
        'F3': 'F3',
        'F4': 'F4',
        'F5': 'F5',
        'F6': 'F6',
        'F7': 'F7',
        'F8': 'F8',
        'F9': 'F9',
        'F10': 'F10',
        'F11': 'F11',
        'F12': 'F12',
#    'F13': 294,
#    'F14': 295,
#    'F15': 296,
#    'NUMLOCK': 300,
#    'CAPSLOCK': 301,
#    'SCROLLOCK': 302,
        'RSHIFT': 'RSHIFT',
        'LSHIFT': 'LSHIFT',
        'RCTRL': 'RCONTROL',
        'LCTRL': 'LCONTROL',
        'RALT': 'RALT',
        'LALT': 'LALT',
#    'RMETA': 309,
#    'LMETA': 310,
#    'LSUPER': 311,
#    'RSUPER': 312,
#    'MODE': 313,
#    'COMPOSE': 314,
#    'HELP': 315,
#    'PRINT': 316,
#    'SYSREQ': 317,
#    'BREAK': 318,
#    'MENU': 319,
#    'POWER': 320,
#    'EURO': 321,
#    'UNDO': 322,
    }

